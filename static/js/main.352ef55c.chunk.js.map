{"version":3,"sources":["redux/auth/authOperations.js","redux/auth/authActions.js","components/PrivateRoute/PrivateRoute.js","components/PublicRoute/PublicRoute.js","components/AvatarAndName/AvatarAndName.js","components/LogAndRegister/LogAndRegister.js","components/Header/Navigation.js","components/Header/Header.js","components/App.js","redux/auth/authReducers.js","redux/store.js","index.js"],"names":["loginUser","param","dispatch","getstaate","a","loginUserFetch","loginUserSuccess","localStorage","setItem","e","console","log","loginUserError","logOut","getstate","logoutUserFetch","logoutUserSuccess","error","logoutUserError","postUserInfoFetch","createAction","postUserInfoSuccess","postUserInfoError","getCurrentUserSuccess","connect","state","isAuthenticated","auth","token","Component","component","routeProps","render","props","to","restricted","AvatarAndName","useDispatch","className","style","color","marginRight","onClick","LogAndRegister","Navigation","useSelector","Header","Home","lazy","Users","Drivers","Login","App","fallback","path","initialState","user","name","email","authReducer","createReducer","payload","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","persistor","persistStore","ReactDOM","loading","document","getElementById"],"mappings":"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","file":"static/js/main.352ef55c.chunk.js","sourcesContent":["// import axios from 'axios';\r\n// import { getDBSuccess } from '../actions';\r\nimport {\r\n  postUserInfoFetch,\r\n  postUserInfoSuccess,\r\n  postUserInfoError,\r\n  loginUserSuccess,\r\n  loginUserFetch,\r\n  loginUserError,\r\n  logoutUserFetch,\r\n  logoutUserSuccess,\r\n  logoutUserError,\r\n  getCurrentUserSuccess,\r\n} from './authActions';\r\n\r\n// axios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\r\n\r\n// const token = {\r\n//   set(token) {\r\n//     axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n//   },\r\n\r\n//   unset() {\r\n//     axios.defaults.headers.common.Authorization = '';\r\n//   },\r\n// };\r\n\r\n// зарегистрировать одного пользователя\r\n\r\nexport const postUserInfo = param => async (dispatch, getstaate) => {\r\n  dispatch(postUserInfoFetch());\r\n\r\n  try {\r\n    // const registerUser = await axios.post('/users/signup', param);\r\n\r\n    // token.set('vslsvlsvjlsc');\r\n    dispatch(postUserInfoSuccess(param));\r\n  } catch (e) {\r\n    console.log(e);\r\n\r\n    dispatch(postUserInfoError(e));\r\n  }\r\n};\r\n\r\n// Залогинитьь\r\nexport const loginUser = param => async (dispatch, getstaate) => {\r\n  dispatch(loginUserFetch());\r\n\r\n  try {\r\n    // const loginUser = await axios.post('/users/login', param);\r\n\r\n    // token.set(loginUser.data.token);\r\n    dispatch(loginUserSuccess(param));\r\n\r\n    localStorage.setItem('tokenLocal', \"yes\");\r\n  } catch (e) {\r\n    console.log(e);\r\n\r\n    dispatch(loginUserError(e));\r\n  }\r\n};\r\n\r\n// Разлогинить\r\n\r\nexport const logOut = param => async (dispatch, getstate) => {\r\n  dispatch(logoutUserFetch());\r\n\r\n  try {\r\n    // await axios.post('/users/logout');\r\n\r\n    // token.unset();\r\n    dispatch(logoutUserSuccess());\r\n    localStorage.setItem('tokenLocal', '');\r\n  } catch (error) {\r\n    dispatch(logoutUserError(error));\r\n  }\r\n};\r\n\r\n// Получить инфу о текущем пользователе\r\n\r\nexport const getCurrentUser = param => async (dispatch, getstate) => {\r\n  // const {\r\n  //   auth: { token: persistedToken },\r\n  // } = getstate();\r\n\r\n  // if (!persistedToken) {\r\n  //   return;\r\n  // }\r\n\r\n  // token.set(persistedToken);\r\n\r\n  try {\r\n    // const response = await axios.get('/users/current');\r\n\r\n    dispatch(getCurrentUserSuccess());\r\n    // const data = await axios.get(`/contacts`);\r\n    // dispatch(getDBSuccess(data.data));\r\n  } catch (error) {}\r\n};\r\n\r\n// export const getCurrentUser = param => async (dispatch, getstate) => {\r\n//   const tokenLocal = localStorage.getItem('tokenLocal');\r\n//\r\n//   if (!tokenLocal) {\r\n//     return\r\n//   }\r\n//   token.set(tokenLocal);\r\n//   const user = await axios.get('/users/current')\r\n\r\n//   dispatch(getCurrentUserSuccess(user.data));\r\n// };\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const postUserInfoFetch = createAction('auth/REGISTER_USER_Fetch');\r\nexport const postUserInfoSuccess = createAction('auth/REGISTER_USER_Success');\r\nexport const postUserInfoError = createAction('auth/REGISTER_USER_Error');\r\n\r\nexport const loginUserFetch = createAction('auth/LOGIN_USER_Fetch');\r\n\r\nexport const loginUserSuccess = createAction('auth/LOGIN_USER_Success');\r\n\r\nexport const loginUserError = createAction('auth/LOGIN_USER_Error');\r\n\r\nexport const logoutUserFetch = createAction('auth/LOGOUT_USER_Fetch');\r\n\r\nexport const logoutUserSuccess = createAction('auth/LOGOUT_USER_Success');\r\n\r\nexport const logoutUserError = createAction('auth/LOGOUT_USER_Error');\r\n\r\nexport const getCurrentUserFetch = createAction('auth/GET_CURRENT_USER_Fetch');\r\n\r\nexport const getCurrentUserSuccess = createAction(\r\n  'auth/GET_CURREN_USER_Success',\r\n);\r\n\r\nexport const getCurrentUserError = createAction('auth/GET_CURREN_USER_Error');\r\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n// import { authSelectors } from '../redux/auth';\n\nconst PrivateRoute = ({\n  component: Component,\n  isAuthenticated,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAuthenticated ? <Component {...props} /> : <Redirect to=\"/login\" />\n    }\n  />\n);\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.token,\n});\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nconst PublicRoute = ({\n  component: Component,\n  isAuthenticated,\n  restricted,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAuthenticated && restricted ? (\n        <Redirect to=\"/users\" />\n      ) : (\n        <Component {...props} />\n      )\n    }\n  />\n);\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.token,\n});\n\nexport default connect(mapStateToProps)(PublicRoute);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport '../Header/navigation.css';\nimport { logOut } from '../../redux/auth/authOperations';\n\nfunction AvatarAndName() {\n  const dispatch = useDispatch();\n\n\n  const handleClick = () => {\n    dispatch(logOut());\n  };\n  return (\n    <div className=\"avatar-container\">\n      <span style={{color : \"white\", marginRight : \"30px\"}}>Вы вошли как Гость </span>\n      <button onClick={handleClick}>Выйти</button>\n    </div>\n  );\n}\n\nexport default AvatarAndName;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../Header/navigation.css';\n\nfunction LogAndRegister() {\n  return (\n    <ul className=\"nav-list log-list\">\n      <li className=\"nav-link\">\n        <NavLink to=\"/login\" className=\"nav-link-item\">\n          Войти\n        </NavLink>\n      </li>\n     \n    </ul>\n  );\n}\n\nexport default LogAndRegister;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport './navigation.css';\nconst Navigation = () => {\n  const token = useSelector(state => state.auth.token);\n  return (\n    <nav>\n      <ul className=\"nav-list\">\n        <li className=\"nav-link\">\n          <NavLink to=\"/home\" className=\"nav-link-item\">\n            Главная\n          </NavLink>\n        </li>\n        {token && (\n          <li className=\"nav-link\">\n            <NavLink to=\"/users\" className=\"nav-link-item\">\n              Пользователи\n            </NavLink>\n          </li>\n        )}\n        {token && (\n          <li className=\"nav-link\">\n            <NavLink to=\"/drivers\" className=\"nav-link-item\">\n              Водители\n            </NavLink>\n          </li>\n        )}\n      </ul>\n    </nav>\n  );\n};\n\n// const mapStateToProps = state => ({\n//   isAuthenticated: state.auth.token,\n// });\n\nexport default Navigation;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport AvatarAndName from '../AvatarAndName/AvatarAndName';\nimport LogAndRegister from '../LogAndRegister/LogAndRegister';\nimport Navigation from './Navigation';\nimport './navigation.css';\n\nconst Header = () => {\n  const token = useSelector(state => state.auth.token);\n  // const token = true;\n  return (\n    <header className=\"header\">\n      <Navigation />\n\n      {token ? <AvatarAndName /> : <LogAndRegister/>}\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport PrivateRoute from './PrivateRoute/PrivateRoute';\nimport PublicRoute from './PublicRoute/PublicRoute';\nimport Header from './Header/Header';\n\n\nconst Home = lazy(() => import('../view/home'));\nconst Users = lazy(() => import('../view/users/users'));\nconst Drivers = lazy(() => import('../view/drivers/drivers'));\nconst Login = lazy(() => import('../view/login'));\n\n\nfunction App() {\n  \n  return (\n    <>\n      <Header />\n      <Suspense fallback={<h3>Загружаем...</h3>}>\n        <Switch>\n          <Route path=\"/home\" component={Home} />\n\n          <PrivateRoute path=\"/users\" component={Users} />\n          <PrivateRoute path=\"/drivers\" component={Drivers} />\n\n\n          <PublicRoute restricted path=\"/login\" component={Login} />\n         \n        </Switch>\n      </Suspense>\n    </>\n  );\n}\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  postUserInfoSuccess,\r\n  loginUserSuccess,\r\n  logoutUserSuccess,\r\n  getCurrentUserSuccess,\r\n} from './authActions';\r\n\r\nconst initialState = {\r\n  user: {\r\n    name: '',\r\n    email: '',\r\n  },\r\n\r\n  //   token: null,\r\n  // isLoading: false,\r\n};\r\n\r\nexport const authReducer = createReducer(initialState, {\r\n  [getCurrentUserSuccess]: (state, { payload }) => {\r\n    return {\r\n      ...state,\r\n      user: {\r\n        ...payload,\r\n      },\r\n    };\r\n  },\r\n\r\n  [postUserInfoSuccess]: (state, { payload }) => ({\r\n    ...state,\r\n    user: {\r\n      ...payload.user,\r\n    },\r\n    token: true,\r\n  }),\r\n\r\n  [loginUserSuccess]: (state, { payload }) => ({\r\n    ...state,\r\n    user: {\r\n      ...payload,\r\n    },\r\n    token: true,\r\n  }),\r\n\r\n  [logoutUserSuccess]: (state, { payload }) => ({\r\n    ...initialState,\r\n  }),\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nimport { authReducer } from './auth/authReducers';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n ];\r\n\r\nconst authPersistConfig = { key: 'token', storage, whitelist: ['token'] };\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n  \r\n  },\r\n  middleware,\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store, { persistor } from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}