{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","view/login.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","Login","dispatch","useDispatch","history","useHistory","useState","email","setEmail","password","setpassword","errorMessage","seterrorMessage","className","onSubmit","evt","preventDefault","includes","user","loginUser","style","color","onChange","target","type"],"mappings":"uJAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oHIsDvFC,UArDD,WACZ,IAAMC,EAAWC,cACXC,EAAUC,cAFE,EAIQC,mBAAS,IAJjB,mBAIXC,EAJW,KAIJC,EAJI,OAKcF,mBAAS,IALvB,mBAKXG,EALW,KAKDC,EALC,OAMqBJ,mBAAS,IAN9B,mBAMZK,EANY,KAMEC,EANF,KA8BlB,OACE,oCACE,wBAAIC,UAAU,mBAAd,mCACA,0BAAMC,SAzBW,SAAAC,GAGnB,GAFAA,EAAIC,iBAEAT,EAAMV,QAAUY,EAASZ,OAG3B,GAAIU,EAAMU,SAAS,KAAM,CACvB,IAAMC,EAAO,CAAEX,QAAOE,YAExBP,EAASiB,YAAUD,IACnBd,EAAQT,KAAK,UACba,EAAS,IACTE,EAAY,SAEVE,EAAgB,wNAGlBA,EAAgB,oKAQcC,UAAU,QACvCF,GAAgB,uBAAGS,MAAO,CAACC,MAAQ,QAAnB,IAA6BV,GAC5C,2BAAOE,UAAU,SAAjB,QAEE,2BAAOS,SAAU,SAAAP,GAAG,OAAIP,EAASO,EAAIQ,OAAO3B,QAAQA,MAAOW,KAG7D,2BAAOM,UAAU,SAAjB,WAEE,2BACES,SAAU,SAAAP,GAAG,OAAIL,EAAYK,EAAIQ,OAAO3B,QACxCA,MAAOa,KAGX,4BAAQe,KAAK,UAAb","file":"static/js/4.6f613685.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { loginUser } from '../redux/auth/authOperations';\nimport './login.css';\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const history = useHistory()\n\n  const [email, setEmail] = useState('');\n  const [password, setpassword] = useState('');\n const [errorMessage, seterrorMessage] = useState(\"\")\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (email.length && password.length) {\n\n\n      if (email.includes(\"@\")) {\n        const user = { email, password };\n\n      dispatch(loginUser(user));\n      history.push(\"/users\")\n      setEmail('');\n      setpassword('');\n      } else {\n        seterrorMessage(\"Пожалуйста введите существующую почту\")\n      }\n    } else {\n      seterrorMessage(\"Пожалуйста заполните все поля\")\n    }\n\n    \n  };\n  return (\n    <>\n      <h2 className=\"title-logandreg\">Войти </h2>\n      <form onSubmit={handleSubmit} className=\"form\">\n      {errorMessage && <p style={{color : \"red\"}}> {errorMessage}</p>}\n        <label className=\"label\">\n          Email\n          <input onChange={evt => setEmail(evt.target.value)} value={email} />\n        </label>\n\n        <label className=\"label\">\n          Password\n          <input\n            onChange={evt => setpassword(evt.target.value)}\n            value={password}\n          />\n        </label>\n        <button type=\"submit\">Войти</button>\n      </form>\n    </>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}